// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { AddPrompt } from "./add_prompt_reducer.ts";
export { AddPrompt };
import { AssignRoles } from "./assign_roles_reducer.ts";
export { AssignRoles };
import { CastVote } from "./cast_vote_reducer.ts";
export { CastVote };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { DeletePrompt } from "./delete_prompt_reducer.ts";
export { DeletePrompt };
import { Join } from "./join_reducer.ts";
export { Join };
import { Kick } from "./kick_reducer.ts";
export { Kick };
import { Leave } from "./leave_reducer.ts";
export { Leave };
import { ResetVotes } from "./reset_votes_reducer.ts";
export { ResetVotes };
import { SetGameState } from "./set_game_state_reducer.ts";
export { SetGameState };
import { SetPrompt } from "./set_prompt_reducer.ts";
export { SetPrompt };
import { UpdateName } from "./update_name_reducer.ts";
export { UpdateName };

// Import and reexport all table handle types
import { GameStatesTableHandle } from "./game_states_table.ts";
export { GameStatesTableHandle };
import { PlayersTableHandle } from "./players_table.ts";
export { PlayersTableHandle };
import { PromptsTableHandle } from "./prompts_table.ts";
export { PromptsTableHandle };

// Import and reexport all types
import { GameState } from "./game_state_type.ts";
export { GameState };
import { Player } from "./player_type.ts";
export { Player };
import { Prompt } from "./prompt_type.ts";
export { Prompt };
import { Vote } from "./vote_type.ts";
export { Vote };

const REMOTE_MODULE = {
  tables: {
    GameStates: {
      tableName: "GameStates",
      rowType: GameState.getTypeScriptAlgebraicType(),
      primaryKey: "game",
      primaryKeyInfo: {
        colName: "game",
        colType: (GameState.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    Players: {
      tableName: "Players",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (Player.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    Prompts: {
      tableName: "Prompts",
      rowType: Prompt.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Prompt.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    AddPrompt: {
      reducerName: "AddPrompt",
      argsType: AddPrompt.getTypeScriptAlgebraicType(),
    },
    AssignRoles: {
      reducerName: "AssignRoles",
      argsType: AssignRoles.getTypeScriptAlgebraicType(),
    },
    CastVote: {
      reducerName: "CastVote",
      argsType: CastVote.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    DeletePrompt: {
      reducerName: "DeletePrompt",
      argsType: DeletePrompt.getTypeScriptAlgebraicType(),
    },
    Join: {
      reducerName: "Join",
      argsType: Join.getTypeScriptAlgebraicType(),
    },
    Kick: {
      reducerName: "Kick",
      argsType: Kick.getTypeScriptAlgebraicType(),
    },
    Leave: {
      reducerName: "Leave",
      argsType: Leave.getTypeScriptAlgebraicType(),
    },
    ResetVotes: {
      reducerName: "ResetVotes",
      argsType: ResetVotes.getTypeScriptAlgebraicType(),
    },
    SetGameState: {
      reducerName: "SetGameState",
      argsType: SetGameState.getTypeScriptAlgebraicType(),
    },
    SetPrompt: {
      reducerName: "SetPrompt",
      argsType: SetPrompt.getTypeScriptAlgebraicType(),
    },
    UpdateName: {
      reducerName: "UpdateName",
      argsType: UpdateName.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddPrompt", args: AddPrompt }
| { name: "AssignRoles", args: AssignRoles }
| { name: "CastVote", args: CastVote }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "DeletePrompt", args: DeletePrompt }
| { name: "Join", args: Join }
| { name: "Kick", args: Kick }
| { name: "Leave", args: Leave }
| { name: "ResetVotes", args: ResetVotes }
| { name: "SetGameState", args: SetGameState }
| { name: "SetPrompt", args: SetPrompt }
| { name: "UpdateName", args: UpdateName }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addPrompt(loyalText: string, traitorText: string) {
    const __args = { loyalText, traitorText };
    let __writer = new __BinaryWriter(1024);
    AddPrompt.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddPrompt", __argsBuffer, this.setCallReducerFlags.addPromptFlags);
  }

  onAddPrompt(callback: (ctx: ReducerEventContext, loyalText: string, traitorText: string) => void) {
    this.connection.onReducer("AddPrompt", callback);
  }

  removeOnAddPrompt(callback: (ctx: ReducerEventContext, loyalText: string, traitorText: string) => void) {
    this.connection.offReducer("AddPrompt", callback);
  }

  assignRoles(game: string) {
    const __args = { game };
    let __writer = new __BinaryWriter(1024);
    AssignRoles.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AssignRoles", __argsBuffer, this.setCallReducerFlags.assignRolesFlags);
  }

  onAssignRoles(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.onReducer("AssignRoles", callback);
  }

  removeOnAssignRoles(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.offReducer("AssignRoles", callback);
  }

  castVote(game: string, votedOn: __Identity) {
    const __args = { game, votedOn };
    let __writer = new __BinaryWriter(1024);
    CastVote.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CastVote", __argsBuffer, this.setCallReducerFlags.castVoteFlags);
  }

  onCastVote(callback: (ctx: ReducerEventContext, game: string, votedOn: __Identity) => void) {
    this.connection.onReducer("CastVote", callback);
  }

  removeOnCastVote(callback: (ctx: ReducerEventContext, game: string, votedOn: __Identity) => void) {
    this.connection.offReducer("CastVote", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  deletePrompt(id: number) {
    const __args = { id };
    let __writer = new __BinaryWriter(1024);
    DeletePrompt.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeletePrompt", __argsBuffer, this.setCallReducerFlags.deletePromptFlags);
  }

  onDeletePrompt(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("DeletePrompt", callback);
  }

  removeOnDeletePrompt(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("DeletePrompt", callback);
  }

  join(game: string) {
    const __args = { game };
    let __writer = new __BinaryWriter(1024);
    Join.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("Join", __argsBuffer, this.setCallReducerFlags.joinFlags);
  }

  onJoin(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.onReducer("Join", callback);
  }

  removeOnJoin(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.offReducer("Join", callback);
  }

  kick(game: string, identity: __Identity) {
    const __args = { game, identity };
    let __writer = new __BinaryWriter(1024);
    Kick.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("Kick", __argsBuffer, this.setCallReducerFlags.kickFlags);
  }

  onKick(callback: (ctx: ReducerEventContext, game: string, identity: __Identity) => void) {
    this.connection.onReducer("Kick", callback);
  }

  removeOnKick(callback: (ctx: ReducerEventContext, game: string, identity: __Identity) => void) {
    this.connection.offReducer("Kick", callback);
  }

  leave(game: string) {
    const __args = { game };
    let __writer = new __BinaryWriter(1024);
    Leave.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("Leave", __argsBuffer, this.setCallReducerFlags.leaveFlags);
  }

  onLeave(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.onReducer("Leave", callback);
  }

  removeOnLeave(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.offReducer("Leave", callback);
  }

  resetVotes(game: string) {
    const __args = { game };
    let __writer = new __BinaryWriter(1024);
    ResetVotes.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ResetVotes", __argsBuffer, this.setCallReducerFlags.resetVotesFlags);
  }

  onResetVotes(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.onReducer("ResetVotes", callback);
  }

  removeOnResetVotes(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.offReducer("ResetVotes", callback);
  }

  setGameState(game: string, state: string, focusOnDevice: string) {
    const __args = { game, state, focusOnDevice };
    let __writer = new __BinaryWriter(1024);
    SetGameState.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetGameState", __argsBuffer, this.setCallReducerFlags.setGameStateFlags);
  }

  onSetGameState(callback: (ctx: ReducerEventContext, game: string, state: string, focusOnDevice: string) => void) {
    this.connection.onReducer("SetGameState", callback);
  }

  removeOnSetGameState(callback: (ctx: ReducerEventContext, game: string, state: string, focusOnDevice: string) => void) {
    this.connection.offReducer("SetGameState", callback);
  }

  setPrompt(game: string) {
    const __args = { game };
    let __writer = new __BinaryWriter(1024);
    SetPrompt.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetPrompt", __argsBuffer, this.setCallReducerFlags.setPromptFlags);
  }

  onSetPrompt(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.onReducer("SetPrompt", callback);
  }

  removeOnSetPrompt(callback: (ctx: ReducerEventContext, game: string) => void) {
    this.connection.offReducer("SetPrompt", callback);
  }

  updateName(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    UpdateName.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateName", __argsBuffer, this.setCallReducerFlags.updateNameFlags);
  }

  onUpdateName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("UpdateName", callback);
  }

  removeOnUpdateName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("UpdateName", callback);
  }

}

export class SetReducerFlags {
  addPromptFlags: __CallReducerFlags = 'FullUpdate';
  addPrompt(flags: __CallReducerFlags) {
    this.addPromptFlags = flags;
  }

  assignRolesFlags: __CallReducerFlags = 'FullUpdate';
  assignRoles(flags: __CallReducerFlags) {
    this.assignRolesFlags = flags;
  }

  castVoteFlags: __CallReducerFlags = 'FullUpdate';
  castVote(flags: __CallReducerFlags) {
    this.castVoteFlags = flags;
  }

  deletePromptFlags: __CallReducerFlags = 'FullUpdate';
  deletePrompt(flags: __CallReducerFlags) {
    this.deletePromptFlags = flags;
  }

  joinFlags: __CallReducerFlags = 'FullUpdate';
  join(flags: __CallReducerFlags) {
    this.joinFlags = flags;
  }

  kickFlags: __CallReducerFlags = 'FullUpdate';
  kick(flags: __CallReducerFlags) {
    this.kickFlags = flags;
  }

  leaveFlags: __CallReducerFlags = 'FullUpdate';
  leave(flags: __CallReducerFlags) {
    this.leaveFlags = flags;
  }

  resetVotesFlags: __CallReducerFlags = 'FullUpdate';
  resetVotes(flags: __CallReducerFlags) {
    this.resetVotesFlags = flags;
  }

  setGameStateFlags: __CallReducerFlags = 'FullUpdate';
  setGameState(flags: __CallReducerFlags) {
    this.setGameStateFlags = flags;
  }

  setPromptFlags: __CallReducerFlags = 'FullUpdate';
  setPrompt(flags: __CallReducerFlags) {
    this.setPromptFlags = flags;
  }

  updateNameFlags: __CallReducerFlags = 'FullUpdate';
  updateName(flags: __CallReducerFlags) {
    this.updateNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get gameStates(): GameStatesTableHandle {
    // clientCache is a private property
    return new GameStatesTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<GameState>(REMOTE_MODULE.tables.GameStates));
  }

  get players(): PlayersTableHandle {
    // clientCache is a private property
    return new PlayersTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.Players));
  }

  get prompts(): PromptsTableHandle {
    // clientCache is a private property
    return new PromptsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Prompt>(REMOTE_MODULE.tables.Prompts));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
